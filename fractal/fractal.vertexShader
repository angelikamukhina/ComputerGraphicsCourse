#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec2 vertexPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out float fragmentColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

uniform int maxIteration;
uniform float radiusLimit;

uniform vec2 scale;
uniform vec2 shift;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace, 1, 1);
    int i = 0;
    vec2 z = vec2(0.0, 0.0);
    vec2 c = vec2(gl_Position.x * scale.x, gl_Position.y * scale.y) + shift;

    while (i < maxIteration && sqrt(dot(z, z)) < radiusLimit) {
        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
        i++;
    }

	fragmentColor = float(i)/float(maxIteration);
}